" Tests for Buflister object

let s:assert = themis#helper('assert')

Describe Buflister:
  Before each
    let s:bufnrs = []
    call add(s:bufnrs, g:Utils.tmp_buffer('b1'))
    call add(s:bufnrs, g:Utils.tmp_buffer('b2'))
    call add(s:bufnrs, g:Utils.tmp_buffer('b3'))
  End

  After each
    call g:Utils.wipeout_all(s:bufnrs)
  End


  It has fields used to write statusline
    let this_bufnr   = bufnr('%')
    let this_bufname = fnamemodify(bufname('%'), ':t')
    let buflister    = bufswitcher#new_buflister('TITLE', [this_bufnr], this_bufnr)
    call s:assert.equals(buflister.title, 'TITLE')
    call s:assert.equals(buflister.bufnrs, [this_bufnr])
    call s:assert.equals(buflister.bufnames[this_bufnr], this_bufname)
    call s:assert.equals(buflister.selected_nr, this_bufnr)
  End

  It selects the current bufnr by default
    let this_bufnr = bufnr('%')

    let buflister = bufswitcher#new_buflister('', [this_bufnr])
    call s:assert.equals(buflister.selected_nr, this_bufnr)

    let buflister = bufswitcher#new_buflister('', [this_bufnr], -100)
    call s:assert.equals(buflister.selected_nr, this_bufnr)
  End

  It returns a bufnr which is ahead of the current one
    let buflister = bufswitcher#new_buflister('bufnrs', s:bufnrs, s:bufnrs[0])
    call s:assert.equals(buflister.bufnrs, s:bufnrs)
    call s:assert.equals(buflister.get_next_bufnr(1), s:bufnrs[1])
    call s:assert.equals(buflister.get_next_bufnr(2), s:bufnrs[2])
    call s:assert.equals(buflister.get_next_bufnr(3), s:bufnrs[0])
    call s:assert.equals(buflister.get_next_bufnr(4), s:bufnrs[1])
  End

  It returns a bufnr which is behind the current one
    let buflister = bufswitcher#new_buflister('bufnrs', s:bufnrs, s:bufnrs[2])
    call s:assert.equals(buflister.bufnrs, s:bufnrs)
    call s:assert.equals(buflister.get_next_bufnr(-1), s:bufnrs[1])
    call s:assert.equals(buflister.get_next_bufnr(-2), s:bufnrs[0])
    call s:assert.equals(buflister.get_next_bufnr(-3), s:bufnrs[2])
    call s:assert.equals(buflister.get_next_bufnr(-4), s:bufnrs[1])
  End
End
